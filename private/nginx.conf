@{nocompress all}

@{if model.redirect && model.redirect.length}
server {
	listen 80;
	@{foreach m in model.redirect}
	server_name @{m.domain};
	@{end}

	location ~ "^/\.well-known/acme-challenge/([-_a-zA-Z0-9]+)$" {
		allow all;
		default_type "text/plain";
		return 200 "$1.@{model.acmethumbprint}";
	}

	location ~ / {
		return 301 http@{if model.isssl}s@{fi}://@{model.domain}$request_uri;
	}
}
@{fi}

@{if model.redirectssl}
server {
	listen 443 ssl;
	server_name @{model.redirectssl.domain};
	ssl_certificate @{model.redirectssl.ssl_cer};
	ssl_certificate_key @{model.redirectssl.ssl_key};
	ssl_trusted_certificate @{model.redirectssl.ssl_cer};
	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:10m;
	ssl_session_tickets off;
	ssl_stapling on;
	ssl_stapling_verify on;
	ssl_protocols TLSv1.2@{if SuperAdmin.nginx > 116001} TLSv1.3@{fi};
	ssl_prefer_server_ciphers off;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

	# HSTS (ngx_http_headers_module is required) (63072000 seconds)
	add_header Strict-Transport-Security "max-age=63072000" always;

	location ~ / {
		return 301 https://@{model.domain}$request_uri;
	}
}
@{fi}

server {

	charset utf-8;
	server_name @{model.domain};

	@{if model.allow80}
	listen 80;
	@{fi}

	@{if model.isssl}
	listen 443 http2 ssl;
	ssl_certificate @{model.ssl_cer};
	ssl_certificate_key @{model.ssl_key};
	ssl_trusted_certificate @{model.ssl_cer};
	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:10m;
	ssl_session_tickets off;
	ssl_stapling on;
	ssl_stapling_verify on;
	ssl_protocols TLSv1.2@{if SuperAdmin.nginx > 116001} TLSv1.3@{fi};
	ssl_prefer_server_ciphers off;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

	# HSTS (ngx_http_headers_module is required) (63072000 seconds)
	add_header Strict-Transport-Security "max-age=63072000" always;

	@{else}
	listen 80;
	@{fi}

	location ~ "^/\.well-known/acme-challenge/([-_a-zA-Z0-9]+)$" {
		allow all;
		default_type "text/plain";
		return 200 "$1.@{model.acmethumbprint}";
	}

	client_max_body_size 1M;

	@{if model.islogging}
	# flush=1m
	access_log	@{CONF.directory_console}@{model.linker}--access.log superadmin;
	@{fi}

	@{foreach m in model.childs}
	location @{m.endpoint} {
		@{if m.uploadquote}
		client_max_body_size @{m.uploadquote}M;
		@{fi}
		@{if m.ddosquote}
		limit_req zone=ddos burst=@{m.ddosquote} nodelay;
		@{fi}
		proxy_set_header Host $http_host;
		proxy_set_header X-Forwarded-For $remote_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-NginX-Proxy true;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_redirect off;
		proxy_http_version 1.1;
		proxy_buffering off;
		@{if m.proxytimeout}
		proxy_read_timeout @{m.proxytimeout}s;
		@{fi}
		proxy_cache_bypass $http_upgrade;
		proxy_cache_key sfs$request_uri$scheme;
		proxy_pass_header X-Ping;
		@{if m.unixsocket}
		proxy_pass http://unix:@{m.unixsocket}:/;
		@{else}
		proxy_pass http://127.0.0.1:@{m.port};
		@{fi}
		break;
	}
	@{end}

	location / {
	@{if model.allowedip && model.allowedip.length}
		@{foreach m in model.allowedip}
		allow @{m};
		@{end}
		deny all;
	@{fi}
	@{if model.blockedip && model.blockedip.length}
		@{foreach m in model.blockedip}
		deny @{m};
		@{end}
	@{fi}
		@{if model.uploadquote}
		client_max_body_size @{model.uploadquote}M;
		@{fi}
		@{if model.ddosquote}
		limit_req zone=ddos burst=@{model.ddosquote} nodelay;
		@{fi}
		proxy_set_header Host $http_host;
		proxy_set_header X-Forwarded-For $remote_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-NginX-Proxy true;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_redirect off;
		proxy_http_version 1.1;
		proxy_buffering off;
		@{if model.proxytimeout}
		proxy_read_timeout @{model.proxytimeout}s;
		@{fi}
		proxy_cache_bypass $http_upgrade;
		proxy_cache_key sfs$request_uri$scheme;
		proxy_pass_header X-Ping;
		@{if model.unixsocket}
		proxy_pass http://unix:@{model.unixsocket}:/;
		@{else}
		proxy_pass http://127.0.0.1:@{model.port};
		@{fi}
		break;
	}
}
